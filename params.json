{"name":"Realtime-rails","tagline":"","body":"# Realtime Support for Rails\r\n\r\nThis gem enables you to communicate with your rails front-end in realtime, leveraging socket.io, redis, and node.js.\r\n\r\nThis gem, and sample node.js servers were inspired by the blog post: [Liam Kaufman's _Adding Real-Time to a RESTful Rails App_](http://liamkaufman.com/blog/2013/02/27/adding-real-time-to-a-restful-rails-app/).\r\n\r\nA live demo of this in action is at [Realtime-rails Demo on Heroku](http://realtime-rails-demo.herokuapp.com/).\r\n\r\nTo start, install them gem in your Gemfile:\r\n\r\n```ruby\r\ngem 'realtime'\r\n```\r\nand then run:\r\n```console\r\nbundle install\r\n```\r\n\r\nNext, you'll need to tell your `application_controller.rb` that it is sharing a realtime token with your realtime server by adding the following lines:\r\n\r\n```ruby\r\n  # app/controllers/application_controller.rb\r\n  \r\n  realtime_controller # instruct all requests to enable realtime support\r\n\r\n  def realtime_user_id\r\n  \treturn 42 # if using devise, change this to current_user.id\r\n  end\r\n\r\n  def realtime_server_url\r\n  \t# point this to your node.js-socket.io-redis realtime server (you can set this later)\r\n  \treturn 'http://your-realtime-server.yourdomain.com'\r\n  end\r\n```\r\n\r\nIn your `application.html.erb` file, add the following to your `<head>` element:\r\n\r\n```ruby\r\n <!-- required: realtime support framework -->\r\n <%= realtime_support %>\r\n <!-- optional: message_handler dequeues realtime messages into Backbone.js style events -->\r\n <%= realtime_message_handler %>\r\n <!-- optional: message_console_logger listens or dequeues realtime messages to the browser console -->\r\n <%= realtime_message_console_logger %>\r\n```\r\nWhile developing locally, you'll need redis installed:\r\n\r\nFor OS X, with homebrew:\r\n```console\r\nbrew install redis\r\n```\r\nFor more information on installing redis locally on other platforms, see http://redis.io/topics/quickstart\r\n\r\nLastly, tell rails about your redis instance:\r\n```ruby\r\n# config/initializers/redis.rb\r\nlocation = ENV[\"REDISCLOUD_URL\"] || 'redis://127.0.0.1:6379/0'\r\nuri = URI.parse(location)\r\n$redis = Redis.new(:host => uri.host, :port => uri.port, :password => uri.password)\r\n```\r\n\r\nAs you can see, in production we can connect to a hosted redis instance such as Redis Cloud.\r\n\r\nNow, you'll need to run a realtime node.js server (you can use my sample realtime server):\r\n\r\n```console\r\ngem install foreman\r\ngit clone git://github.com/mikeatlas/realtime-server.git\r\ncd realtime-server\r\nsudo npm install\r\nforeman start\r\n```\r\n\r\nNow that you have rails running and connecting to redis, and node.js running and connecting to the same redis, you should be able to try it out. Connect to your rails console `rails c` and run the following command:\r\n\r\n```ruby\r\n$redis.publish 'realtime_msg', {msg: 'hello world - ' + SecureRandom.hex, recipient_user_ids: [41, 42]}.to_json\r\n```\r\n\r\nIf you are user id `42` in the rails application, you should see in your browser console something like:\r\n```\r\nObject {msg: \"hello world - e008f94a8710826bad8c4f6af28be922\"}\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}